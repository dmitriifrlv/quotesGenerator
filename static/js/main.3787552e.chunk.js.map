{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","quote","text","author","index","getRandomIdx","Math","floor","random","length","setState","fetch","then","response","json","element","icon","faTwitter","randIcon","faRandom","quoteLeft","faQuoteLeft","quoteRight","faQuoteRight","this","tweetURL","className","id","class","target","href","onClick","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQA8DeA,E,4MAvDbC,MAAM,CACJC,MAAO,CACL,CACAC,KAAM,0EACNC,OAAQ,kBAGVC,MAAO,G,EASTC,aAAe,WAAO,IACZJ,EAAU,EAAKD,MAAfC,MACFG,EAAQE,KAAKC,MAAMD,KAAKE,SAASP,EAAMQ,QAC7C,EAAKC,SAAS,CACZN,MAAMA,K,kEAVW,IAAD,OAClBO,MAAM,+BACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAC,GAAQ,OAAE,EAAKH,SAAS,CAACT,MAAMY,GAAW,EAAKR,mB,+BAYrD,IAAMU,EAAU,cAAC,IAAD,CAAiBC,KAAMC,MACjCC,EAAW,cAAC,IAAD,CAAiBF,KAAMG,MAClCC,EAAY,cAAC,IAAD,CAAiBJ,KAAMK,MACnCC,EAAa,cAAC,IAAD,CAAiBN,KAAMO,MAJnC,EAKkBC,KAAKxB,MACxBE,EANC,EAKCD,MALD,EAKQG,OAETqB,EAAQ,gDAA4CvB,EAAKA,KAAjD,YAAyDA,EAAKC,QAC5E,OACE,qBAAKuB,UAAU,0DAAf,SACE,sBAAKA,UAAU,kCAAkCC,GAAG,YAApD,UAEMzB,GACE,sBAAKwB,UAAU,kBAAf,UACE,oBAAGC,GAAG,OAAN,UAAa,qBAAKA,GAAG,OAAR,SAAgBP,IAA7B,KAAgDlB,EAAKA,KAArD,IAA2D,qBAAKyB,GAAG,QAAR,SAAiBL,IAA5E,OACA,sBAAMI,UAAU,uCAAuCC,GAAG,SAA1D,SAAoEzB,EAAKC,YAK/E,sBAAKuB,UAAU,iCAAf,UACE,oBAAGE,MAAM,yBAAyBC,OAAO,SAASC,KAAML,EAAUE,GAAG,cAArE,UAAoFZ,EAApF,YACA,yBAAQa,MAAM,yBAAyBG,QAASP,KAAKnB,aAAcsB,GAAG,YAAtE,cAAoFT,EAApF,4B,GA/CIc,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3787552e.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons'\nimport { faRandom, faQuoteLeft, faQuoteRight } from '@fortawesome/free-solid-svg-icons'\n\nclass App extends Component{\n  state={\n    quote: [\n      {\n      text: \"Genius is one percent inspiration and ninety-nine percent perspiration.\",\n      author: \"Thomas Edison\"\n      }\n    ],\n    index: 0\n  }\n  \n  componentDidMount (){\n    fetch('https://type.fit/api/quotes')\n    .then(response=>response.json())\n    .then(response=>this.setState({quote:response}, this.getRandomIdx))\n  }\n\n  getRandomIdx = () => {\n    const { quote } = this.state;\n    const index = Math.floor(Math.random()*quote.length);\n    this.setState({\n      index:index\n    })\n  }\n\n  render() {\n    const element = <FontAwesomeIcon icon={faTwitter} />\n    const randIcon = <FontAwesomeIcon icon={faRandom} />\n    const quoteLeft = <FontAwesomeIcon icon={faQuoteLeft} />\n    const quoteRight = <FontAwesomeIcon icon={faQuoteRight} />\n    const { quote, index } = this.state;\n    const text = quote[index];\n    const tweetURL = `https://twitter.com/intent/tweet?text=${text.text}-${text.author}`;\n    return (\n      <div className='d-flex align-items-center justify-content-center vh-100'>\n        <div className='col-6 box p-4 rounded card-body' id=\"quote-box\">\n            {\n              text && (\n                <div className='blockquote mb-4'>\n                  <p id=\"text\"><div id=\"icon\">{quoteLeft}</div>  {text.text} <div id=\"icon2\">{quoteRight}</div> </p>\n                  <cite className='d-block text-right blockquote-footer' id=\"author\">{text.author}</cite>\n                </div>\n              )\n            }\n            \n            <div className=\"d-flex justify-content-between\">\n              <a class=\"btn btn-sm btn-primary\" target='_blank' href={tweetURL} id=\"tweet-quote\">{element} Tweet</a>\n              <button class=\"btn btn-sm btn-primary\" onClick={this.getRandomIdx} id=\"new-quote\"> {randIcon} Get Quote</button>\n            </div>\n        </div>\n      </div>\n      \n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}